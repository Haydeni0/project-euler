/* 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <tuple>
#include <numeric>
#include "E:\Google Drive\WorkingDirectories\CppWorkingDirectories\ProjectEuler\CustomFunctions\UsefulFunctions.h"

std::vector<long long> findFactors(long long n)
{
    std::vector<long long> factor_list;
    for (int j{1}; j <= sqrt(n); ++j)
    {
        if (n % j == 0)
        {
            factor_list.push_back(j);
            if (n % n / j == 0)
            {
                factor_list.push_back(n / j);
            }
        }
    }
    return factor_list;
}

int main()
{
    long long n{0}; // Number to find divisors of
    long long count{1};
    int num_factors{0};
    do 
    {
        n += count++;
        num_factors = findFactors(n).size();
        // std::cout << n << ", " << num_factors << "\n";
        // std::cin.get();
    } while (num_factors <= 500);
    
    
    std::cout << n;
    // for (auto elem : factor_list)
    //     std::cout << elem << ", ";
}