/* 
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

#include "UsefulFunctions.h"

bool divisiblePrimeFactorCount(const std::vector<int> &prime_count)
{ // A function that finds the gcd of the amounts of times a prime factor occurs in a number
    // If the gcd is 1, then this number can not be represented as a power of a different number.
    uf::assertMsg(prime_count.size() >= 1, "Empty vector");
    int gcd{prime_count[0]};
    for (int j{0}; j < prime_count.size() - 1; j++)
    {
        gcd = std::gcd(gcd, prime_count[j + 1]);
    }
    if (gcd == 1)
        return true;
    else
        return false;
}

int main()
{

    // Could also just list all the combinatons of prime factors
    // Or make a prime factor class
    int max_num{100};

    // Create a list of numbers that cannot be expressed as a power of a different number
    std::vector<int> a_list;
    std::vector<int> exception_list;
    std::vector<int> exception_list_base;
    std::vector<int> exception_list_exponent;
    for (int a{2}; a <= max_num; ++a)
    {
        auto [prime_list, prime_count]{uf::findPrimeFactors(a)};

        if (divisiblePrimeFactorCount(prime_count))
            a_list.push_back(a);
        else
        {
            exception_list.push_back(a);
            exception_list_base.push_back(uf::vectorProd(prime_list));
            exception_list_exponent.push_back(uf::vectorMin(prime_count));
        }
    }

    uf::printVector(a_list);
    uf::printVector(exception_list);
    uf::printVector(exception_list_base);
    uf::printVector(exception_list_exponent);

    int num_distinct_terms{(int)a_list.size() * 99};

    // Also notice that, for example,  64 is in the exception_list. But 2^b, for 2 <= b <= 100, only includes 64^b for b <= 16.
    // Include cases such as this.

    std::vector<int> new_exception_list_base;
    std::vector<int> new_exception_list_exponent;
    for (int j{static_cast<int>(exception_list_base.size()) - 1}; j >= 0; j--)
    {
        if (!uf::inVector(exception_list_base[j], new_exception_list_base))
        {
            new_exception_list_base.push_back(exception_list_base[j]);
            new_exception_list_exponent.push_back(exception_list_exponent[j]);
        }
    }

    std::cout << num_distinct_terms << "\n";

    uf::printVector(new_exception_list_base);
    uf::printVector(new_exception_list_exponent);

    return 0;
}